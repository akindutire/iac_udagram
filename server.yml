Parameters:
  EnvironmentName:
    Type: String
    Default: Udagram
  VpcCidr:
    Type: String
  Priv1SubnetCidr:
    Type: String
  Priv2SubnetCidr:
    Type: String
  Pub1SubnetCidr:
    Type: String
  Pub2SubnetCidr:
    Type: String
  Anywhere:
    Type: String
Resources:
  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: SGLB
      GroupDescription: 'SG for Load balancer'
      SecurityGroupEgress:
        - CidrIp: !Ref Anywhere
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
      SecurityGroupIngress:
        - CidrIp: !Ref Anywhere
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
      VpcId: 
        Fn::ImportValue: !Sub ${EnvironmentName}-VPCID
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} LB Sec Group 

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: SGAPP
      GroupDescription: 'SG for Apps'
      SecurityGroupEgress:
        - CidrIp: !Ref Anywhere
          IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
      VpcId: 
        Fn::ImportValue: !Sub ${EnvironmentName}-VPCID          
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} LB Sec Group
  
  AppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: LBSecurityGroup
    Properties:
      IpAddressType: ipv4
      Scheme: 'internet-facing'
      SecurityGroups:
        - !Ref LBSecurityGroup
      Subnets:
        - Fn::ImportValue: !Sub ${EnvironmentName}-Pub-Net1
        - Fn::ImportValue: !Sub ${EnvironmentName}-Pub-Net2
  LBTargetGroup1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: AppLB
    Properties:
      Name: !Sub ${EnvironmentName}-Target-Group
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 10
      UnhealthyThresholdCount: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      Protocol: HTTP
      Port: 80
      VpcId: 
        Fn::ImportValue: !Sub ${EnvironmentName}-VPCID
  Listener1:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: LBTargetGroup1
    Properties: 
      Port: 80
      Protocol : HTTP
      LoadBalancerArn: !Ref AppLB
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LBTargetGroup1
  ListenerRule1:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: Listener1
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref LBTargetGroup1
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref Listener1
      Priority: 1
    
  #Launch Config for AutoScaling Group  
  RoleForS3:
    Type: AWS::IAM::Role
    Properties:
      RoleName: S3RoleForEC2
      Path: /
      AssumeRolePolicyDocument: 
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: s3Ec2
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:GetObjectAcl
                  - s3:GetObjectAttributes
                Resource: '*'           
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref RoleForS3

  ServerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y httpd
            systemctl start httpd
        SecurityGroups:
          - !Ref AppSecurityGroup
        ImageId: 'ami-0dd6adfad4ad37eec'
        InstanceType: t3.medium
        InstanceProfile: !Ref EC2InstanceProfile
        BlockDeviceMappings:
          - DeviceName: '/dev/sdk'
            Ebs:
              VolumeSize: 10
              DeleteOnTermination: true
  AutoScaleGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: ServerLaunchConfig
    Properties:
        AutoScalingGroupName: !Sub ${EnvironmentName}-EC2-Group
        VPCZoneIdentifier:
          - Fn::ImportValue: !Sub ${EnvironmentName}-Pub-Nets
        HealthCheckGracePeriod: 90
        HealthCheckType: ELB
        LaunchConfigurationName: !Ref ServerLaunchConfig 
        MinSize: 4
        MaxSize: 8
        TargetGroupARNs: 
          - !Ref LBTargetGroup1


Outputs:
  LoadbalancerUrl:
    Value: 
      Fn::Sub: 
        - ${scheme}${dns}
        - {dns: !GetAtt AppLB.DNSName, scheme: http://}
    Export:
      Name: !Sub ${EnvironmentName}-LB-URL



          
